// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: segmenter.proto

package custom

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SegmentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	File           *File                  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	SegmentLength  *int32                 `protobuf:"varint,2,opt,name=segment_length,json=segmentLength,proto3,oneof" json:"segment_length,omitempty"`
	SegmentOverlap *int32                 `protobuf:"varint,3,opt,name=segment_overlap,json=segmentOverlap,proto3,oneof" json:"segment_overlap,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SegmentRequest) Reset() {
	*x = SegmentRequest{}
	mi := &file_segmenter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentRequest) ProtoMessage() {}

func (x *SegmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segmenter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentRequest.ProtoReflect.Descriptor instead.
func (*SegmentRequest) Descriptor() ([]byte, []int) {
	return file_segmenter_proto_rawDescGZIP(), []int{0}
}

func (x *SegmentRequest) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SegmentRequest) GetSegmentLength() int32 {
	if x != nil && x.SegmentLength != nil {
		return *x.SegmentLength
	}
	return 0
}

func (x *SegmentRequest) GetSegmentOverlap() int32 {
	if x != nil && x.SegmentOverlap != nil {
		return *x.SegmentOverlap
	}
	return 0
}

type SegmentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Segments      []*Segment             `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentResponse) Reset() {
	*x = SegmentResponse{}
	mi := &file_segmenter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentResponse) ProtoMessage() {}

func (x *SegmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segmenter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentResponse.ProtoReflect.Descriptor instead.
func (*SegmentResponse) Descriptor() ([]byte, []int) {
	return file_segmenter_proto_rawDescGZIP(), []int{1}
}

func (x *SegmentResponse) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ContentType   string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_segmenter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_segmenter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_segmenter_proto_rawDescGZIP(), []int{2}
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *File) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type Segment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_segmenter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_segmenter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_segmenter_proto_rawDescGZIP(), []int{3}
}

func (x *Segment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_segmenter_proto protoreflect.FileDescriptor

const file_segmenter_proto_rawDesc = "" +
	"\n" +
	"\x0fsegmenter.proto\x12\tsegmenter\"\xb6\x01\n" +
	"\x0eSegmentRequest\x12#\n" +
	"\x04file\x18\x01 \x01(\v2\x0f.segmenter.FileR\x04file\x12*\n" +
	"\x0esegment_length\x18\x02 \x01(\x05H\x00R\rsegmentLength\x88\x01\x01\x12,\n" +
	"\x0fsegment_overlap\x18\x03 \x01(\x05H\x01R\x0esegmentOverlap\x88\x01\x01B\x11\n" +
	"\x0f_segment_lengthB\x12\n" +
	"\x10_segment_overlap\"A\n" +
	"\x0fSegmentResponse\x12.\n" +
	"\bsegments\x18\x01 \x03(\v2\x12.segmenter.SegmentR\bsegments\"W\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent\x12!\n" +
	"\fcontent_type\x18\x03 \x01(\tR\vcontentType\"\x1d\n" +
	"\aSegment\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text2O\n" +
	"\tSegmenter\x12B\n" +
	"\aSegment\x12\x19.segmenter.SegmentRequest\x1a\x1a.segmenter.SegmentResponse\"\x00B>Z<github.com/adrianliechti/wingman/pkg/segmenter/custom;customb\x06proto3"

var (
	file_segmenter_proto_rawDescOnce sync.Once
	file_segmenter_proto_rawDescData []byte
)

func file_segmenter_proto_rawDescGZIP() []byte {
	file_segmenter_proto_rawDescOnce.Do(func() {
		file_segmenter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_segmenter_proto_rawDesc), len(file_segmenter_proto_rawDesc)))
	})
	return file_segmenter_proto_rawDescData
}

var file_segmenter_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_segmenter_proto_goTypes = []any{
	(*SegmentRequest)(nil),  // 0: segmenter.SegmentRequest
	(*SegmentResponse)(nil), // 1: segmenter.SegmentResponse
	(*File)(nil),            // 2: segmenter.File
	(*Segment)(nil),         // 3: segmenter.Segment
}
var file_segmenter_proto_depIdxs = []int32{
	2, // 0: segmenter.SegmentRequest.file:type_name -> segmenter.File
	3, // 1: segmenter.SegmentResponse.segments:type_name -> segmenter.Segment
	0, // 2: segmenter.Segmenter.Segment:input_type -> segmenter.SegmentRequest
	1, // 3: segmenter.Segmenter.Segment:output_type -> segmenter.SegmentResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_segmenter_proto_init() }
func file_segmenter_proto_init() {
	if File_segmenter_proto != nil {
		return
	}
	file_segmenter_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_segmenter_proto_rawDesc), len(file_segmenter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_segmenter_proto_goTypes,
		DependencyIndexes: file_segmenter_proto_depIdxs,
		MessageInfos:      file_segmenter_proto_msgTypes,
	}.Build()
	File_segmenter_proto = out.File
	file_segmenter_proto_goTypes = nil
	file_segmenter_proto_depIdxs = nil
}
